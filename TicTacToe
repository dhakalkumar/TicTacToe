/*
 * 	Author : Kumar Dhakal
 * 	E-mail : dhakalkumar10@gmail.com
 * 	August, 2017
 * 	website : www.whatsinjava.blogspot.com
 * 
 */

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

public class TicTacToe extends JFrame {
	/**
	 * 
	 */
	private static final long serialVersionUID = 4687733410884355807L;
	// constants for the game board
	public static final int ROWS = 3;
	public static final int COLS = 3;

	// constants for the graphics drawing
	public static final int CELL_SIZE = 100;
	public static final int CANVAS_WIDTH = CELL_SIZE * COLS;
	public static final int CANVAS_HEIGHT = CELL_SIZE * ROWS;
	public static final int GRID_WIDTH = 8;
	public static final int GRID_WIDTH_HALF = GRID_WIDTH / 2;
	public static final int CELL_PADDING = CELL_SIZE / 6;
	public static final int SYMBOL_SIZE = CELL_SIZE - CELL_PADDING * 2;
	public static final int SYMBOL_STROKE_WIDTH = 8;

	public enum GameState { // various states of the game
		PLAYING, DRAW, CROSS_WON, NOUGHT_WON
	}

	private GameState currentState;

	public enum Seed { // seeds and cell contents
		EMPTY, CROSS, NOUGHT
	}

	private Seed currentPlayer;
	private Seed[][] board;
	private DrawCanvas canvas;
	private JLabel statusBar;

	// constructor to setup the game and the GUI components
	public TicTacToe() {
		canvas = new DrawCanvas();
		canvas.setPreferredSize(new Dimension(CANVAS_WIDTH, CANVAS_HEIGHT));
		canvas.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent e) {
				int mouseX = e.getX();
				int mouseY = e.getY();
				// find out in which row/column the mouse was clicked
				int rowSelected = mouseY / CELL_SIZE;
				int colSelected = mouseX / CELL_SIZE;
				if (currentState == GameState.PLAYING) {
					if (rowSelected >= 0 && rowSelected < ROWS && colSelected >= 0 && colSelected < COLS
							&& board[rowSelected][colSelected] == Seed.EMPTY) {
						board[rowSelected][colSelected] = currentPlayer; // make a move
						updateGame(currentPlayer, rowSelected, colSelected);
						currentPlayer = (currentPlayer == Seed.CROSS) ? Seed.NOUGHT : Seed.CROSS;
					}
				} else {
					initGame(); // restart the game
				}
				repaint();
			}
		});

		statusBar = new JLabel("     ");
		statusBar.setFont(new Font(Font.DIALOG_INPUT, Font.BOLD, 15));
		statusBar.setBorder(BorderFactory.createEmptyBorder(2, 5, 4, 5));

		Container cp = getContentPane();
		cp.setLayout(new BorderLayout());
		cp.add(canvas, BorderLayout.CENTER);
		cp.add(statusBar, BorderLayout.SOUTH);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		pack();
		setTitle("Tic Tac Toe game by kumar dhakal");
		setVisible(true);
		setResizable(false);
		board = new Seed[ROWS][COLS];
		initGame();
	}

	// initialise the game board and the status
	public void initGame() {
		for (int row = 0; row < ROWS; ++row) {
			for (int col = 0; col < COLS; ++col) {
				board[row][col] = Seed.EMPTY; // empty all the cells at the
												// starting
			}
		}
		currentState = GameState.PLAYING; // ready to play
		currentPlayer = Seed.CROSS; // start with cross
		statusBar.setText("Ready");
	}

	public void updateGame(Seed theSeed, int rowSelected, int colSelected) {
		if (hasWon(theSeed, rowSelected, colSelected)) { // check for a win
			currentState = (theSeed == Seed.CROSS) ? GameState.CROSS_WON : GameState.NOUGHT_WON;
		} else if (isDraw()) { // check for a draw
			currentState = GameState.DRAW;
		}
		// otherwise, no change to the current state of the game (still
		// GameState.PLAYING
	}

	// return true if is a draw, i.e. no more empty cell
	public boolean isDraw() {
		for (int row = 0; row < ROWS; ++row) {
			for (int col = 0; col < COLS; ++col) {
				if (board[row][col] == Seed.EMPTY) {
					return false; // an empty cell found, so no draw
				}
			}
		}
		return true; // none of the cells are empty, its a draw
	}

	// Return true if the player with "theSeed" has won after placing at
	// (rowSelected,colSelected)
	public boolean hasWon(Seed theSeed, int rowSelected, int colSelected) {
		return (board[rowSelected][0] == theSeed // 3 in the row
				&& board[rowSelected][1] == theSeed && board[rowSelected][2] == theSeed
				|| board[0][colSelected] == theSeed // 3 in the column
						&& board[1][colSelected] == theSeed && board[2][colSelected] == theSeed
				|| rowSelected == colSelected // 3 in the diagonal
						&& board[0][0] == theSeed && board[1][1] == theSeed && board[2][2] == theSeed
				|| rowSelected + colSelected == 2 // 3 in the opposite diagonal
						&& board[0][2] == theSeed && board[1][1] == theSeed && board[2][0] == theSeed);
	}

	class DrawCanvas extends JPanel {
		/**
		 * 
		 */
		private static final long serialVersionUID = -2533891763202862523L;

		@Override
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			setBackground(Color.WHITE);
			g.setColor(Color.LIGHT_GRAY);
			for (int row = 1; row < ROWS; ++row) {
				g.fillRoundRect(0, CELL_SIZE * row - GRID_WIDTH_HALF, CANVAS_WIDTH - 1, GRID_WIDTH, GRID_WIDTH,
						GRID_WIDTH);
			}
			for (int col = 1; col < COLS; ++col) {
				g.fillRoundRect(CELL_SIZE * col - GRID_WIDTH_HALF, 0, GRID_WIDTH, CANVAS_HEIGHT - 1, GRID_WIDTH,
						GRID_WIDTH);
			}
			Graphics2D g2d = (Graphics2D) g;
			g2d.setStroke(new BasicStroke(SYMBOL_STROKE_WIDTH, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
			for (int row = 0; row < ROWS; ++row) {
				for (int col = 0; col < COLS; ++col) {
					int x1 = col * CELL_SIZE + CELL_PADDING;
					int y1 = row * CELL_SIZE + CELL_PADDING;
					if (board[row][col] == Seed.CROSS) {
						g2d.setColor(Color.RED);
						int x2 = (col + 1) * CELL_SIZE - CELL_PADDING;
						int y2 = (row + 1) * CELL_SIZE - CELL_PADDING;
						g2d.drawLine(x1, y1, x2, y2);
						g2d.drawLine(x2, y1, x1, y2);
					} else if (board[row][col] == Seed.NOUGHT) {
						g2d.setColor(Color.BLUE);
						g2d.drawOval(x1, y1, SYMBOL_SIZE, SYMBOL_SIZE);
					}
				}
			}
			// print a message at the status bar
			if (currentState == GameState.PLAYING) {
				statusBar.setForeground(Color.BLACK);
				if (currentPlayer == Seed.CROSS) {
					statusBar.setText("X's Turn!");
				} else {
					statusBar.setText("O's Turn!");
				}
			} else if (currentState == GameState.DRAW) {
				statusBar.setForeground(Color.RED);
				statusBar.setText("It's a DRAW!! Click to play again");
			} else if (currentState == GameState.CROSS_WON) {
				statusBar.setForeground(Color.RED);
				statusBar.setText("'X' WON!! Click to play again");
			} else if (currentState == GameState.NOUGHT_WON) {
				statusBar.setForeground(Color.RED);
				statusBar.setText("'O' WON!! Click to play again");
			}
		}
	}

	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				new TicTacToe();
			}
		});
	}
}
